{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP+hYS3PQ2pnpEIkBAy++Qn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rizkiramdani04/Portofolio_DS_DA/blob/main/Big_Mart_Sales.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "txAarH9DEezk"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn import metrics"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset=pd.read_csv('/content/Train (1).csv')"
      ],
      "metadata": {
        "id": "9rydboGTE5M9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "4g0lSzvbFAGU",
        "outputId": "50a5f03f-99cf-4f0b-a5a3-aa0837b07be7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998         NaN               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4f47849c-83fb-48ef-a21a-ecb610372b49\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f47849c-83fb-48ef-a21a-ecb610372b49')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4f47849c-83fb-48ef-a21a-ecb610372b49 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4f47849c-83fb-48ef-a21a-ecb610372b49');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cf9d8fd7-232f-4933-882a-ac3e99497055\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf9d8fd7-232f-4933-882a-ac3e99497055')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cf9d8fd7-232f-4933-882a-ac3e99497055 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 8523,\n  \"fields\": [\n    {\n      \"column\": \"Item_Identifier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1559,\n        \"samples\": [\n          \"FDY01\",\n          \"FDG05\",\n          \"NCJ29\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.643456499186395,\n        \"min\": 4.555,\n        \"max\": 21.35,\n        \"num_unique_values\": 415,\n        \"samples\": [\n          16.75,\n          8.695,\n          7.605\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Fat_Content\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Regular\",\n          \"reg\",\n          \"low fat\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Visibility\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.051597822321135196,\n        \"min\": 0.0,\n        \"max\": 0.328390948,\n        \"num_unique_values\": 7880,\n        \"samples\": [\n          0.224837308,\n          0.046088273,\n          0.0204702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"Dairy\",\n          \"Soft Drinks\",\n          \"Baking Goods\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_MRP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.27506651219039,\n        \"min\": 31.29,\n        \"max\": 266.8884,\n        \"num_unique_values\": 5938,\n        \"samples\": [\n          255.9672,\n          93.512,\n          208.3954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Identifier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"OUT035\",\n          \"OUT018\",\n          \"OUT045\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Establishment_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2009,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1997,\n          2009,\n          2002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Medium\",\n          \"High\",\n          \"Small\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Location_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Tier 1\",\n          \"Tier 3\",\n          \"Tier 2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Supermarket Type2\",\n          \"Supermarket Type3\",\n          \"Supermarket Type1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Outlet_Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1706.499615733832,\n        \"min\": 33.29,\n        \"max\": 13086.9648,\n        \"num_unique_values\": 3493,\n        \"samples\": [\n          5466.8838,\n          8417.7094,\n          5888.3352\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "78yRFksvFEu4",
        "outputId": "73c8deac-7cdb-43ba-929c-b5774ade081c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8523, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ncoFD--4FNf6",
        "outputId": "233687ea-0c93-40d7-9a63-238871e16a95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8523 entries, 0 to 8522\n",
            "Data columns (total 12 columns):\n",
            " #   Column                     Non-Null Count  Dtype  \n",
            "---  ------                     --------------  -----  \n",
            " 0   Item_Identifier            8523 non-null   object \n",
            " 1   Item_Weight                7060 non-null   float64\n",
            " 2   Item_Fat_Content           8523 non-null   object \n",
            " 3   Item_Visibility            8523 non-null   float64\n",
            " 4   Item_Type                  8523 non-null   object \n",
            " 5   Item_MRP                   8523 non-null   float64\n",
            " 6   Outlet_Identifier          8523 non-null   object \n",
            " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
            " 8   Outlet_Size                6113 non-null   object \n",
            " 9   Outlet_Location_Type       8523 non-null   object \n",
            " 10  Outlet_Type                8523 non-null   object \n",
            " 11  Item_Outlet_Sales          8523 non-null   float64\n",
            "dtypes: float64(4), int64(1), object(7)\n",
            "memory usage: 799.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "k-pa4thaFQCK",
        "outputId": "8b23023d-608a-405c-dc92-1ca78d3a144a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Identifier                 0\n",
              "Item_Weight                  1463\n",
              "Item_Fat_Content                0\n",
              "Item_Visibility                 0\n",
              "Item_Type                       0\n",
              "Item_MRP                        0\n",
              "Outlet_Identifier               0\n",
              "Outlet_Establishment_Year       0\n",
              "Outlet_Size                  2410\n",
              "Outlet_Location_Type            0\n",
              "Outlet_Type                     0\n",
              "Item_Outlet_Sales               0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Item_Identifier</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Weight</th>\n",
              "      <td>1463</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Visibility</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_MRP</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Size</th>\n",
              "      <td>2410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Item_Weight'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2TGabVTTFTzo",
        "outputId": "dc708d1c-7c51-4f7d-d44d-92aa609a5a64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12.857645184135976"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Item_Weight'].fillna(dataset['Item_Weight'].mean(),inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Sw650HRFc4C",
        "outputId": "ea7f5e0e-e97f-4fe0-fffd-60e71f8f446d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-46-b5031c89dd3b>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  dataset['Item_Weight'].fillna(dataset['Item_Weight'].mean(),inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Outlet_Size'].mode()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "qQ_PAbaHFsFg",
        "outputId": "4c7c975b-307a-4b7f-b13a-6b3d88631032"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    Medium\n",
              "Name: Outlet_Size, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outlet_Size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Medium</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mode_outlet_size=dataset.pivot_table(values='Outlet_Size',columns='Outlet_Type',aggfunc=(lambda x:x.mode()[0]))"
      ],
      "metadata": {
        "id": "7ADOA_5vF0im"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(mode_outlet_size)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XURx7FgpGG_i",
        "outputId": "f5da66c3-acc6-4592-c5ed-8daf10bb6f28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Outlet_Type Grocery Store Supermarket Type1 Supermarket Type2  \\\n",
            "Outlet_Size         Small             Small            Medium   \n",
            "\n",
            "Outlet_Type Supermarket Type3  \n",
            "Outlet_Size            Medium  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "miss_values=dataset['Outlet_Size'].isnull()"
      ],
      "metadata": {
        "id": "aeucCVHxGPun"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(miss_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YdklNUOKGVHZ",
        "outputId": "c4b31e39-15d0-4325-ec68-671b5a5f80a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       False\n",
            "1       False\n",
            "2       False\n",
            "3        True\n",
            "4       False\n",
            "        ...  \n",
            "8518    False\n",
            "8519     True\n",
            "8520    False\n",
            "8521    False\n",
            "8522    False\n",
            "Name: Outlet_Size, Length: 8523, dtype: bool\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.loc[miss_values,'Outlet_Size']=dataset.loc[miss_values,'Outlet_Type'].apply(lambda x:mode_outlet_size[x])"
      ],
      "metadata": {
        "id": "4-RK5JctGkiV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "fZcGD2YjG47K",
        "outputId": "8efd8290-3af0-488c-de65-61ce7ada709a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Identifier              0\n",
              "Item_Weight                  0\n",
              "Item_Fat_Content             0\n",
              "Item_Visibility              0\n",
              "Item_Type                    0\n",
              "Item_MRP                     0\n",
              "Outlet_Identifier            0\n",
              "Outlet_Establishment_Year    0\n",
              "Outlet_Size                  0\n",
              "Outlet_Location_Type         0\n",
              "Outlet_Type                  0\n",
              "Item_Outlet_Sales            0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Item_Identifier</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Weight</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Visibility</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_MRP</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Size</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outlet_Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "NGyE_BrrG8F4",
        "outputId": "59cc2218-f4bc-486e-f006-c8de8a2011a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Item_Weight  Item_Visibility     Item_MRP  Outlet_Establishment_Year  \\\n",
              "count  8523.000000      8523.000000  8523.000000                8523.000000   \n",
              "mean     12.857645         0.066132   140.992782                1997.831867   \n",
              "std       4.226124         0.051598    62.275067                   8.371760   \n",
              "min       4.555000         0.000000    31.290000                1985.000000   \n",
              "25%       9.310000         0.026989    93.826500                1987.000000   \n",
              "50%      12.857645         0.053931   143.012800                1999.000000   \n",
              "75%      16.000000         0.094585   185.643700                2004.000000   \n",
              "max      21.350000         0.328391   266.888400                2009.000000   \n",
              "\n",
              "       Item_Outlet_Sales  \n",
              "count        8523.000000  \n",
              "mean         2181.288914  \n",
              "std          1706.499616  \n",
              "min            33.290000  \n",
              "25%           834.247400  \n",
              "50%          1794.331000  \n",
              "75%          3101.296400  \n",
              "max         13086.964800  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-44fe5427-27e4-4057-acc5-a2a69e5c1962\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "      <td>8523.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.857645</td>\n",
              "      <td>0.066132</td>\n",
              "      <td>140.992782</td>\n",
              "      <td>1997.831867</td>\n",
              "      <td>2181.288914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.226124</td>\n",
              "      <td>0.051598</td>\n",
              "      <td>62.275067</td>\n",
              "      <td>8.371760</td>\n",
              "      <td>1706.499616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>4.555000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.290000</td>\n",
              "      <td>1985.000000</td>\n",
              "      <td>33.290000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.310000</td>\n",
              "      <td>0.026989</td>\n",
              "      <td>93.826500</td>\n",
              "      <td>1987.000000</td>\n",
              "      <td>834.247400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>12.857645</td>\n",
              "      <td>0.053931</td>\n",
              "      <td>143.012800</td>\n",
              "      <td>1999.000000</td>\n",
              "      <td>1794.331000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>16.000000</td>\n",
              "      <td>0.094585</td>\n",
              "      <td>185.643700</td>\n",
              "      <td>2004.000000</td>\n",
              "      <td>3101.296400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>21.350000</td>\n",
              "      <td>0.328391</td>\n",
              "      <td>266.888400</td>\n",
              "      <td>2009.000000</td>\n",
              "      <td>13086.964800</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44fe5427-27e4-4057-acc5-a2a69e5c1962')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-44fe5427-27e4-4057-acc5-a2a69e5c1962 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-44fe5427-27e4-4057-acc5-a2a69e5c1962');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e4dd2a93-90ed-49eb-a473-27c96bcfa1df\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4dd2a93-90ed-49eb-a473-27c96bcfa1df')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e4dd2a93-90ed-49eb-a473-27c96bcfa1df button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Item_Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3009.2419143853276,\n        \"min\": 4.2261237245329735,\n        \"max\": 8523.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          8523.0,\n          12.857645184135976,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Visibility\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3013.304152859587,\n        \"min\": 0.0,\n        \"max\": 8523.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.06613202877895108,\n          0.053930934,\n          8523.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_MRP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2967.578504408736,\n        \"min\": 31.29,\n        \"max\": 8523.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          140.9927819781767,\n          143.0128,\n          8523.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Establishment_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2506.291593828245,\n        \"min\": 8.371760408092706,\n        \"max\": 8523.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1997.8318667135984,\n          1999.0,\n          8523.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Outlet_Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4519.156901462071,\n        \"min\": 33.29,\n        \"max\": 13086.9648,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2181.288913575032,\n          1794.331,\n          8523.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set()"
      ],
      "metadata": {
        "id": "SGvnaaZTHAAJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.distplot(dataset['Item_Weight'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "id": "7JP3LR-MHBlk",
        "outputId": "50b84911-002b-41b9-8ed6-a082a7efd03e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-56-5fe883929fc4>:2: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(dataset['Item_Weight'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.distplot(dataset['Item_Visibility'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "ioEgBUcYHKOt",
        "outputId": "b8fce531-a798-4ab1-9f4a-6671fe00be77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-57-8898598733ba>:2: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(dataset['Item_Visibility'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.distplot(dataset['Item_MRP'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 658
        },
        "id": "IZ1yHpGTHUIa",
        "outputId": "b48b37e9-aca9-4a76-fe17-8febba244a4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-58-e7373adde393>:2: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(dataset['Item_MRP'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.displot(dataset['Item_Outlet_Sales'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "id": "rw6VOpEdHj5-",
        "outputId": "300ccac2-ec6d-438b-996b-1d838e441f7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "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wAAAqEuqPJAbNmyoVq1aafr06Ro0aFCFBwYAQF1S4UD++uuvq3IcAADUadV2DBkAAJRdpS+d+eGHH+rdd9/V999/L0m65JJLdPXVV6tr166VHhwAAHVFhQO5oKBAf//73/XOO+/IMAzZ7XZJksPh0MqVK3Xttddqzpw5CgwMrLLBAgDgryo8Zb148WK9/fbbGjFihLZv364PP/xQH374oXbs2KGRI0dq8+bNWrx4cVWOFQAAv1XhQP73v/+tG2+8Uffff7/+8Ic/uNubNGmi//u//9MNN9ygN998s0oGCQCAv6twIP/000/q1KlTqcs7deqkn376qaKrBwCgTqlwIDdv3lwffvhhqct3796t5s2bl2ud7733nm677TZ169ZNHTt2VK9evTRr1izl5OR49Nu6dav69++vqKgo9enTR+vXr/daV0FBgZ544gnFx8crOjpaI0aMUGZmZrnGAwBATalwIN9www3atGmTUlJSlJmZKafTKZfLpczMTE2bNk1paWm68cYby7XOX3/9VZ06ddL06dP13HPPacSIEXr99dd17733uvt89NFHGjdunKKjo7V8+XIlJSXp4YcfVlpamse6ZsyYobVr12rSpElauHChCgoKdMcdd3iFOwAAZlDhs6zHjBmjrKwsrVmzRmvXrpXVeibbXS6XDMPQjTfeqDFjxpRrnQMGDPB4HBsbq6CgIE2dOlU//PCDmjVrpiVLlqhTp0569NFHJUndunVTVlaWFixYoOuuu06SdOzYMa1bt07Tpk3TLbfcIkmKiopSjx49tHr1ao0aNaqiZcMkSruHcnCQTXKVcG9lADC5CgeyzWbT448/rjvuuEPp6ek6evSoJKlFixZKTEzUpZdeWiUDbNSokaQz91kuKCjQrl27dN9993n0SU5O1ltvvaUjR46oZcuW2r59u1wulzugi9cTHx+v9PR0AtkPlHYP5fGDYhQcYPHBiACgcsoVyKdPn9Y//vEP/fnPf9awYcMknbnN4u/D94UXXtDq1av18MMPV+h7yE6nU0VFRdq/f78WL16snj17qmXLltq/f78KCwsVFhbm0T88PFySlJmZqZYtWyozM1NNmjRRw4YNvfqtW7eu3OMBAKC6lSuQX331VW3YsEGpqann7Hf11Vfrn//8pyIiIjR06NByD6pHjx764YcfJEndu3fXnDlzJEnZ2dmS5L4ISbHix8XLHQ6HQkJCvNZrt9vdfSojIKDiVxy12Yqfa5HF4r0nZ5Gqtb1at3H2X31Ug9VaudfnXIpfu99eQ//hz7VJ/l2fP9cm+X99ZytXIG/atEm9e/dWq1atztmvdevWuu6667Rx48YKBfKyZcuUn5+v/fv3a8mSJRozZoxWrlxZ7vVUB6vVoosuql/p9dhsVgUE2LzaLRZVa3tNbMOXNdhstip5fc7Fbvff+3z7c22Sf9fnz7VJ/l+fVM5A3rdvn66//voy9Y2JidG2bdsqNKjiKfCYmBhFRUVpwIABevvtt9W2bVtJ8jpT2uFwSJJ7itputys3N9drvQ6Hw2sau7xcLkMOx8kKP99ms8puD5bT6VJRkdNruWGoWturdRsWKcBm82kNTqdTJ07klficyip+7RyOfDmd/nXimD/XJvl3ff5cm+Qf9ZV1J6FcgVxYWFjmY8KBgYEqKCgoz+pLFBkZqcDAQB0+fFg9e/ZUYGCgMjMz1b17d3ef4u8XFx9bDgsL088//6zs7GyPAM7MzPQ6/lwRRUVV8aYwZBhGCa2q1vbq3IblrDlrX9XgclXV61O6Mx+maucvhvPx59ok/67Pn2uT/L8+qZzfQ7744ov17bfflqnvt99+q4svvrhCgzrbZ599psLCQrVs2VJBQUGKjY3Vf/7zH48+qampCg8PV8uWLSVJCQkJslqt2rx5s7tPdna2tm/frsTExEqPCQCAqlauPeQrr7xSb7zxhkaPHq0mTZqU2u/48eN644031KdPn3INZty4cerYsaMiIyN1wQUX6Ouvv9Zzzz2nyMhIXXPNNZKke+65R8OHD9cjjzyipKQk7dq1S2+99Zbmzp3rXk/z5s11yy23aPbs2bJarWrWrJmWLl2qkJAQDRkypFxjAgCgJpQrkEeNGqU333xTt99+u/7xj3/osssu8+rz2WefacqUKTp9+rTuuuuucg2mU6dOSk1N1bJly2QYhlq0aKGBAwfqzjvvVFBQkCSpS5cuWrhwoebNm6d169bpkksu0YwZM5SUlOSxrilTpqh+/fqaM2eO8vLy1LlzZ61cubLEs68BAPC1cgVyq1atNG/ePP3tb3/TkCFD1KpVK0VERKh+/frKy8vTt99+q8OHD+uCCy7QU089pdatW5drMHfffbfuvvvu8/br1auXevXqdc4+QUFBeuCBB/TAAw+UawwAAPhCua/UdfXVV+vNN9/U8uXL9e677+qdd95xL7v44os1cOBAjRo16rxfjQIAAL+p0KUzW7ZsqenTp0uScnNzlZeXp/r166tBgwZVOjgAAOqKCl/LuliDBg0IYgAAKsn/r0UGAEAtQCADAGACBDIAACZAIAMAYAIEMgAAJkAgAwBgAgQyAAAmQCADAGACBDIAACZAIAMAYAIEMgAAJkAgAwBgAgQyAAAmQCADAGACBDIAACZAIAMAYAIBvh4AUJUCA63KL3R5tQcH2SSXdzsAmAWBDL9yutClxWv2eLWPHxSj4ACLD0YEAGXDlDUAACZAIAMAYAIEMgAAJkAgAwBgAgQyAAAmQCADAGACBDIAACZAIAMAYAIEMgAAJsCVulAncElNAGZHIKNO4JKaAMyOKWsAAEyAQAYAwAQIZAAATIBABgDABAhkAABMgEAGAMAECGQAAEyAQAYAwAQIZAAATIBABgDABAhkAABMgEAGAMAECGQAAEyAQAYAwAQIZAAATIBABgDABAhkAABMgEAGAMAETBXImzZt0j333KPExERFR0drwIABWrdunQzD8Oi3du1a9enTR1FRUerfv7+2bdvmta6cnBxNnjxZXbt2VUxMjCZMmKAff/yxpkoBAKBcTBXIq1atUnBwsB588EEtWbJEiYmJmjp1qhYvXuzus3HjRk2dOlVJSUlavny5oqOjNW7cOH366ace65o4caJ27NihRx55RE8++aQOHjyoUaNGqaioqIarAgDg/AJ8PYCzLVmyRI0bN3Y/jouL06+//qqVK1fqr3/9q6xWqxYsWKC+fftq4sSJkqRu3bpp3759Wrx4sZYvXy5J2rNnj7Zv367nnntOCQkJkqTQ0FAlJydr8+bNSk5OrvHaAAA4F1PtIZ8dxsXatWun3NxcnTx5UllZWTp06JCSkpI8+iQnJysjI0MFBQWSpPT0dNntdsXHx7v7hIWFqV27dkpPT6/eIgAAqABTBXJJPv74YzVr1kwNGjRQZmampDN7u2cLDw9XYWGhsrKyJEmZmZkKDQ2VxWLx6BcWFuZeBwAAZmKqKevf++ijj5SamqoHHnhAkpSdnS1JstvtHv2KHxcvdzgcCgkJ8Vpfw4YN9cUXX1R6XAEBFf8cY7MVP9fi9YHhTKuqtb1at3H2X2tJDVZr2V/P4tfut9fQf/hzbZJ/1+fPtUn+X9/ZTBvIx44d06RJkxQbG6vhw4f7ejhuVqtFF11Uv9LrsdmsCgiwebVbLKrW9prYRm2qwWazlfv1tNuDy9W/NvHn2iT/rs+fa5P8vz7JpIHscDg0atQoNWrUSAsXLpTVeuaTUcOGDSWd+UpT06ZNPfqfvdxut+vYsWNe683Oznb3qSiXy5DDcbLCz7fZrLLbg+V0ulRU5PRabhiq1vZq3YZFCrDZalUNTqdTJ07klbiN3yt+7RyOfDmdrjI9p7bw59ok/67Pn2uT/KO+sn7oN10gnzp1SqNHj1ZOTo5effVVj6nnsLAwSWeOERf/vfhxYGCgWrVq5e6XkZEhwzA8pikPHjyoiIiISo+xqKgq3hSG1/erz7SqWturcxuWs+asa0sNNptVOae8gzo4yCa5Sn6dz3yYqp2/GM7Hn2uT/Ls+f65N8v/6JJOd1FVUVKSJEycqMzNTzz77rJo1a+axvFWrVmrTpo3S0tI82lNTUxUXF6egoCBJUmJiorKzs5WRkeHuc/DgQe3du1eJiYnVXwhqjdOFLi1cs8frT35ByXvmAFBdTLWHPH36dG3btk0PPvigcnNzPS720b59ewUFBWn8+PG677771Lp1a8XGxio1NVWff/65XnzxRXffmJgYJSQkaPLkyXrggQdUr149zZ07V5GRkerdu7cPKgMA4NxMFcg7duyQJD3++ONey7Zs2aKWLVuqX79+ys/P1/Lly7Vs2TKFhoZq0aJFiomJ8eg/b948zZo1SykpKSoqKlJCQoKmTJmigABTlQwAgCSTBfLWrVvL1G/gwIEaOHDgOfuEhIRo5syZmjlzZlUMDQCAamWqY8gAANRVBDIAACZAIAMAYAIEMgAAJkAgAwBgAgQyAAAmQCADAGACBDIAACZgqguDAGYRGGhVfqHnheytLqdsuad9NCIA/o5ABkpwutClxWv2eLRZLBZNGnq5Lij5Fs0AUClMWQMAYAIEMgAAJkAgAwBgAgQyAAAmQCADAGACBDIAACZAIAMAYAIEMgAAJkAgAwBgAgQyAAAmQCADAGACBDIAACZAIAMAYAIEMgAAJkAgAwBgAtwPGSgHq9WivIIiuVye7cFBNnk1AkA5EMhAOZwuKNKiNZ/KMAyP9vGDYhQcYPHRqAD4A6asAQAwAfaQgSoQGGhVfmHJU9ZMZwMoCwIZqAKnC11avGZPicuYzgZQFkxZAwBgAgQyAAAmQCADAGACHEMGqllpJ3xxsheAsxHIQDUr7YQvTvYCcDamrAEAMAECGQAAEyCQAQAwAQIZAAATIJABADABAhkAABMgkAEAMAECGQAAEyCQAQAwAQIZAAATIJABADABAhkAABMgkAEAMAECGQAAEyCQAQAwAVMF8nfffaeUlBQNGDBA7du3V79+/Urst3btWvXp00dRUVHq37+/tm3b5tUnJydHkydPVteuXRUTE6MJEyboxx9/rO4SAACoEFMF8rfffqv33ntPf/rTnxQeHl5in40bN2rq1KlKSkrS8uXLFR0drXHjxunTTz/16Ddx4kTt2LFDjzzyiJ588kkdPHhQo0aNUlFRUQ1UAgBA+QT4egBn69mzp6655hpJ0oMPPqgvvvjCq8+CBQvUt29fTZw4UZLUrVs37du3T4sXL9by5cslSXv27NH27dv13HPPKSEhQZIUGhqq5ORkbd68WcnJyTVTEHAOgYFW5Re6vNqDg2ySy7sdgH8zVSBbrefeYc/KytKhQ4f0f//3fx7tycnJmj17tgoKChQUFKT09HTZ7XbFx8e7+4SFhaldu3ZKT08nkGEKpwtdWrxmj1f7+EExCg6w+GBEAHzJVFPW55OZmSnpzN7u2cLDw1VYWKisrCx3v9DQUFksnr/UwsLC3OsAAMBMTLWHfD7Z2dmSJLvd7tFe/Lh4ucPhUEhIiNfzGzZsWOI0eHkFBFT8c4zNVvxci9cHhjOtqtb2at3G2X+trTWcq93y2/8tspy/fwW3bbVW7j1WEcXvy9/en/7Fn+vz59ok/6/vbLUqkM3AarXooovqV3o9NptVAQE2r3aLRdXaXhPb8OcaJCnAVr1jtdlsVfIeqwi7Pdgn260p/lyfP9cm+X99Ui0L5IYNG0o685Wmpk2butsdDofHcrvdrmPHjnk9Pzs7292nolwuQw7HyQo/32azym4PltPpUlGR02u5Yaha26t1G5YzYVWrazhX+//fmS1yOiWj+sbqdDp14kReieuqLsXvS4cjX06n/51Q5s/1+XNtkn/UV9YP2LUqkMPCwiSdOUZc/Pfix4GBgWrVqpW7X0ZGhgzD8JgSPHjwoCIiIio9jqKiqnhTGDIMo4RWVWt7dW7j7Gnc2lrDudrd9Rney6pyrC5XVb3Hyu/MB8Xa+UuvLPy5Pn+uTfL/+qRadlJXq1at1KZNG6WlpXm0p6amKi4uTkFBQZKkxMREZWdnKyMjw93n4MGD2rt3rxITE2t0zEB5BQZalV9keP3Reb6FAKB2M9Uecn5+vt577z1J0tGjR5Wbm+sO365du6px48YaP3687rvvPrVu3VqxsbFKTU3V559/rhdffNG9npiYGCUkJGjy5Ml64IEHVK9ePc2dO1eRkZHq3bu3T2oDyoqvQwF1k6kC+fjx47r33ns92oofv/DCC4qNjVW/fv2Un5+v5cuXa9myZQoNDdWiRYsUExPj8bx58+Zp1qxZSklJUVFRkRISEjRlyhQFBJiqZAAAJJkskFu2bKlvvvnmvP0GDhyogQMHnrNPSEiIZs6cqZkzZ1bV8AAAqDYclAIAwARMtYcMoAKsVuUXeH99imtiA7ULgQzUcvkFTi3kJDCg1mPKGgAAEyCQAQAwAaasgVqitPsni1lpwC8QyEAtUdoFQ8YOiimhN4DahilrAABMgEAGAMAECGQAAEyAQAYAwAQIZAAATIBABgDABAhkAABMgEAGAMAEuDAI4KdKu7IXd4ECzIlABvxUaVf24i5QgDkxZQ0AgAmwhwzUMSVNZVtdTp36OU+BNvacAV8hkIE6pqSpbIvFooAAm/56c5TqWQllwBeYsgYAwAQIZAAATIApawBuAQFW5RfwVSnAFwhkAG6nC1xaxFelAJ9gyhoAABMgkAEAMAECGQAAEyCQAQAwAQIZAAATIJABADABAhkAABMgkAEAMAECGQAAE+BKXQDOq6RbNkpcUhOoSgQygPMq6ZaNEpfUBKoSgQygwthzBqoOgQygwthzBqoOJ3UBAGAC7CEDqHJMZQPlRyADqHJMZQPlRyAD8D2rVfkFTq9m9qhRlxDIAGpMaVPZsji1kD1q1HEEMoAaU9pU9thBMT4YDWAunGUNAIAJEMgAAJgAgQwAgAlwDBmAafF9ZtQlBDIA0+L7zKhLCGQAtU6pX58Se8+ovQhkALVOaXvOEnvPqL38+qSuAwcOaMSIEYqOjlZ8fLxmz56tgoICXw8LgA84ck8rr8Cp/CLD44+sfv1rELWI3+4hZ2dn6/bbb1ebNm20cOFC/fDDD3r88cd16tQppaSk+Hp4AKpJSdPZVpdTKnRpwaufyjAMj2XsUcMs/DaQV69erby8PC1atEiNGjWSJDmdTk2fPl2jR49Ws2bNfDtAANWipOlsi8WicYOiS+xf7Wdyl3Kd7irdBvyC3wZyenq64uLi3GEsSUlJSZo2bZp27Nihm266yXeDA2AapR2P/ttfLldhkeHVHlwvQPmni8rcXtp1uqVz7J1zs406yW8DOTMzUzfffLNHm91uV9OmTZWZmemjUQGoLc513e3ytpem2m+2QbDXKhbj9wdU/ESHDh1077336u677/Zo79evn2JiYvTYY49VaL2GYcjlqviPzGKRrFariopcys477bXcXr+eHNXYXt3bsMiikPpBtbqGc7U3rF+vXK+bL8da3vaaeO18+f4u72tnxn+LDRvUk0r49WOxSKX9Ji+p5ob168lSgcPmJW3jXOspb/9S1+P+T+XWc85tVNFYS2Kzle3EQQIZAAAT8Nvz/e12u3Jycrzas7Oz1bBhQx+MCACA0vltIIeFhXkdK87JydFPP/2ksLAwH40KAICS+W0gJyYmaufOnXI4HO62tLQ0Wa1WxcfH+3BkAAB489tjyNnZ2erbt69CQ0M1evRo94VBrr/+ei4MAgAwHb8NZOnMpTMfe+wx7dmzR/Xr19eAAQM0adIkBQUF+XpoAAB48OtABgCgtvDbY8gAANQmBDIAACZAIAMAYAIEMgAAJkAgAwBgAgQyAAAmQCDXkAMHDmjEiBGKjo5WfHy8Zs+erYKCAl8Py23Tpk265557lJiYqOjoaA0YMEDr1q3T778Vt3btWvXp00dRUVHq37+/tm3b5rWunJwcTZ48WV27dlVMTIwmTJigH3/80avfJ598osGDB6tTp07q0aOHli1b5rW96pCXl6fExERFRkbqv//9r8ey2lzfhg0bdMMNNygqKkqxsbG66667dOrUKffyrVu3qn///oqKilKfPn20fv16r3UUFBToiSeeUHx8vKKjozVixIgSb1da0+/nLVu2aODAgYqJiVFCQoLuvfdeZWVlefUz++v33XffKSUlRQMGDFD79u3Vr1+/EvvVdB2GYWjZsmW6+uqr1alTJw0ePFiffvppldaWm5urhQsX6pZbblGXLl105ZVXasyYMfrmm29MX1uNMVDtfv31VyM+Pt74y1/+YqSnpxtr1641Lr/8cmP69Om+HprboEGDjEmTJhkbN240du7caTz55JPGpZdeaixcuNDd56233jIiIyONuXPnGhkZGcbUqVON9u3bG3v27PFY18iRI43ExERj48aNxjvvvGP069fP6N+/v1FYWOjuc+jQISM6OtoYO3assXPnTmPlypVGhw4djGeffbbaa509e7Zx5ZVXGhEREcbnn3/uF/U9/fTTRkxMjLF06VJj165dRlpamjFt2jQjNzfXMAzD2L17t9GuXTtj6tSpRkZGhjF37lwjMjLS2LRpk8d6pk6dalx++eXG2rVrjfT0dGPo0KFG9+7dDYfD4e5T0+/nDz74wLj00kuNBx980NixY4exceNGo3fv3sY111xj5Ofnu/vVhtfv7bffNhITE43x48cb/fr1M/r27evVxxd1LF261OjQoYOxcuVKY+fOncbYsWONmJgY4/Dhw1VW2zfffGPEx8cbTz31lPH+++8b77zzjjF06FDjsssuM/bv32/q2moKgVwDnnnmGSM6Oto4ceKEu2316tVGu3btjGPHjvluYGc5fvy4V9uUKVOMzp07G06n0zAMw+jdu7fxt7/9zaPP4MGDjbvuusv9+JNPPjEiIiKM999/39124MABIzIy0ti4caO7berUqUaPHj2M06dPu9vmzJljdOnSxaOtqu3fv9+Ijo42XnnlFa9Arq31HThwwGjfvr3x7rvvltpn5MiRxuDBgz3a/va3vxlJSUnux//73/+Mdu3aGatXr3a3nThxwoiOjjaWLVvmbqvp9/PUqVONnj17Gi6Xy92WkZFhREREGLt373a31YbXr/jfkmEYxgMPPFBiINd0HadOnTI6d+5szJkzx93n9OnTRo8ePYxp06ZVWW15eXnGyZMnPdpyc3ONrl27Go8++qipa6spTFnXgPT0dMXFxalRo0butqSkJLlcLu3YscN3AztL48aNvdratWun3NxcnTx5UllZWTp06JCSkpI8+iQnJysjI8M9XZmeni673e5xA4+wsDC1a9dO6enp7rb09HT16tXL4zKmycnJcjgc2rNnT1WX5zZjxgwNGTJEoaGhHu21ub7XXntNLVu21FVXXVXi8oKCAu3atUvXXXedR3tycrIOHDigI0eOSJK2b98ul8vl0a9Ro0aKj4/3qq0m389FRUWqX7++LGfdLT4kJESS3NOTteX1s1rP/SvXF3V88sknys3N9dhmUFCQrr32Wo91Vba2Cy+8UMHBwR5t9evXV+vWrT2mo81YW00hkGtAZmam1y0f7Xa7mjZtWuLxObP4+OOP1axZMzVo0MA9zt8HWXh4uAoLC93H8zIzMxUaGurxy1PyvB3myZMn9b///c/rZxIWFiaLxVJtP5O0tDTt27dPY8eO9VpWm+v77LPPFBERoaefflpxcXHq2LGjhgwZos8++0ySdPjwYRUWFnqNJzw83F1T8f+bNGnidb/w8PBwjzHX9Pv5pptu0oEDB/TSSy8pJydHWVlZeuqpp9S+fXt17tzZo4ba+PqdzRd1FP+/pPfH999/73EeQlVzOBz69ttvPbbtL7VVBIFcAxwOh+x2u1d7w4YNlZ2d7YMRnd9HH32k1NRUjRw5UpLc4/x9HcWPi5c7HA733svZzq41JyenxHUFBQUpODi4Wn4m+fn5evzxxzVp0iQ1aNDAa3ltru+nn37S9u3b9cYbb2jatGlavHixLBaLRo4cqePHj1e6Nrvd7jHmmn4/d+nSRYsWLdKcOXPUpUsXXXPNNTp+/LiWL18um83mUUNtfP3O5os6HA6HgoKCVK9ePa9tGoZRrfX+85//lMVi0a233upu85faKoJAhpdjx45p0qRJio2N1fDhw309nCqxZMkSNWnSRDfffLOvh1LlDMPQyZMnNX/+fF133XW66qqrtGTJEhmGoRdffNHXw6u0Tz75RPfff78GDRqk559/XvPnz5fL5dLdd99tuj0clN369eu1Zs0apaSkqHnz5r4ejikQyDXAbre7P9GdLTs722t60NccDodGjRqlRo0aaeHChe7jQsXj/H0dDofDY7ndbldubq7Xes+utfjT7+/XVVBQoPz8/Cr/mRw9elQrVqzQhAkTlJOTI4fDoZMnT0o6M/WVl5dXq+uz2+1q1KiRLr30Undbo0aN1L59e+3fv7/StTkcDo8x1/T7ecaMGerWrZsefPBBdevWTdddd52WLVumvXv36o033vCooTa+fmfzRR12u10FBQU6ffq01zYtFku11Pvee+8pJSVFf/3rX3XjjTd6LKvttVUGgVwDzj72USwnJ0c//fST17ENXzp16pRGjx6tnJwcPfvssx7TRsXj/H0dmZmZCgwMVKtWrdz9Dh486PVdwIMHD7rXceGFF+qPf/yj17qKn1fVP5MjR46osLBQd999t6644gpdccUVGjNmjCRp+PDhGjFiRK2ur23btqUuO336tFq3bq3AwMASa5N+e23DwsL0888/e03j/f6YcU2/nw8cOODxYUOSmjdvrosuukiHDx/2qKE2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hg0bpn/9618aM2aMwsLCJEnh4eFlGlOLFi20Z88e7du3TxEREefs+8orr+jPf/6zevbsqYCAAG3btk3Tp0+XYRj6y1/+UurzXC6X7rnnHn388ccaNGiQwsPDtW/fPj3//PM6dOiQnn76aXe9o0ePVmRkpCZMmKCgoCB99913+uSTT8pUC+owH9/+ETC99evXe9w7efr06UZERIRXv927dxsRERHGm2++6dGenp7u1V58/+mz78v6/vvvGxEREUanTp2Mo0ePuttXr17tdb/c8xkwYIBx+eWXn7PPypUrjYiICGPLli0edZ59/2vD+O3e0Wdv/+677zZ69Ojhtc7ie+KuX7/e3Xb77bcb/fr187hfssvlMgYPHmz07t3b3bZp06Zy11ls+/btRrt27Yx27doZgwcPNmbPnm28//77RkFBgVff/Px8r7aRI0cavXr18mi77bbbPO7T+/rrrxuXXnqpsXv3bo9+r7zyihEREWF8/PHHhmH89nM9fvx4uetA3caUNVBF0tLSFBISovj4eP3yyy/uPx06dNCFF17oNf3atm1bxcTEuB8XTy1369ZNl1xyiVd7VlZWmceSl5d3zr1W6be92tzc3DKvt7x+/fVXffDBB0pKSlJubq77Z3LixAklJCTo0KFD+uGHHyq9nfj4eK1evVo9e/bU119/rWeffVZ33nmnEhMTPabGJemCCy5w/z0nJ0e//PKLunbtqqysLOXk5JS6jbS0NIWHhyssLMzj9e3WrZskuV/f4mnzLVu2yOVyVbo21B1MWQNV5LvvvlNOTo7i4uJKXP77k4v++Mc/ejwOCQmRJDVv3tyjvUGDBpIkh8NR5rHUr19fJ06cOGefvLw8d9/qcvjwYRmGofnz52v+/Pkl9jl+/LiaNWtW6W116tRJixYtUkFBgb7++mu98847WrVqle699169/vrratu2rSTp448/1sKFC/Xpp58qPz/fYx05OTnu1+H3vvvuOx04cOC8r29ycrLWrl2rKVOmaM6cOYqLi9O1116r6667rsyHHFA3EchAFXG5XGrSpImefPLJEpc3btzY47HNZiuxX2nthmGUeSzh4eH66quv9P3333vsbZ/tm2++kSR3UFkslhL7VWYvr/i5I0eOVPfu3Uvs07p16wqvvyRBQUHq1KmTOnXqpDZt2uihhx5SWlqaxo0bp8OHD+uOO+5QWFiYHnzwQf3xj39UYGCg3nvvPa1ateqctbpcLkVERLiPm/9e8QepCy64QC+99JJ27dqld999V++//75SU1P16quvasWKFaW+vgCBDJRTacHVunVrZWRkqHPnzh7Tor5w9dVX66233tLrr7+uv/71r17Lc3NztWXLFoWFhblP6Cqeav39tG1J3wsu7Wfwe61atZIkBQYG6sorrzxn37Kuszw6duwoSfrxxx8lnTnZraCgQEuWLPH4oFKWs7lbt26tr7/+WnFxcecdq9VqVVxcnOLi4vTQQw/pmWee0dy5c7Vr167z/hxQdzF/ApRTcHCwJO8p5KSkJDmdTvfZtmcrKioq15RzZfXp00dt27bV8uXL3VcYK+ZyuTRt2jRlZ2dr3Lhx7vbiPdXdu3e725xOp9asWeO1/uDg4HMeby3WpEkTde3aVa+++qo7FM/2yy+/eKxT8v5AUBYffPBBiTMI7733niS5z9ou3js9u29OTo7Wr19/3m0kJSXphx9+KPHncerUKZ08eVLSmePmv9euXTtJ8vp6FHA29pCBcurQoYMkacaMGUpISJDNZlPfvn3VtWtXDR48WEuXLtVXX32l+Ph4BQYG6tChQ0pLS9PDDz+s6667rkbGGBQUpAULFuj222/X0KFDddNNN6ljx47KycnRW2+9pS+//FIjR45U37593c/585//rOjoaD311FPKzs5Ww4YNlZqaqqKiohJ/BqmpqZo1a5aioqJ04YUXlvpd5GnTpmno0KG6/vrrNWjQILVq1Uo///yzPv30Ux07dkxvvvmmpDOhZbPZtHz5cuXk5CgoKEjdunXz+h5xSWbMmKH8/Hxde+21CgsLU2FhoT755BNt2rRJLVq00E033SRJ7tdkzJgxGjJkiPLy8rR27Vo1adJEP/300zm3MWDAAG3atEnTpk3Trl271LlzZzmdTmVmZiotLU3PPvusoqKitHjxYn300Ue66qqr1KJFCx0/flwvv/yymjdvrssvv/y8taDuIpCBcurdu7eGDRumjRs36s0335RhGO5ge/TRR9WxY0etXr1ac+fOlc1mU4sWLdS/f3917ty5RscZHh6uN998U8uWLdPWrVv12muv6YILLlDHjh21ZMmSEgP0ySefVEpKipYtWya73a5bbrlFsbGxGjFihEe/oUOH6quvvtJrr72mVatWqUWLFqUGctu2bbV+/XotWrRIGzZs0K+//qrGjRurffv2Gjt2rLtf06ZNNX36dC1dulQPP/ywnE6nXnjhhTIF8v3336+0tDS99957evXVV1VYWKhLLrlEQ4cO1T333OOejg8LC9OCBQs0b948PfHEE/rDH/6gW2+9VY0bN9bkyZPPuQ2r1arFixdr1apVeuONN/T2228rODhYLVu21LBhwxQaGirpzEVfjh49qvXr1+vEiRO66KKL1LVrV40fP77UE8YASbIY5TlTBAAAVAuOIQMAYAJMWQO1SEFBgdd1sX8vJCTE52d5V5W8vDz3yVKlady4MV8lgl8gkIFaZM+ePRo+fPg5+8yaNct9ElNtt2LFivPe6nLLli1q2bJlDY0IqD4cQwZqkezsbH355Zfn7NO2bVtdfPHFNTSi6pWVlXXeS4ZefvnlqlevXg2NCKg+BDIAACbASV0AAJgAgQwAgAkQyAAAmACBDACACRDIAACYAIEMAIAJEMgAAJgAgQwAgAn8P7TEqyQn9vpgAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.countplot(x='Outlet_Establishment_Year',data=dataset)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "gMQpRzCdW8Tb",
        "outputId": "f41abd49-9950-4b65-cd27-048a26cb0f3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.countplot(x='Item_Fat_Content',data=dataset)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "Fmjhj2oPXKxl",
        "outputId": "05ec3c3f-4954-49ca-99ad-8ef5cf2080bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.countplot(x='Item_Type',data=dataset)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "t26mSM1NXWjm",
        "outputId": "d808608f-5b29-4e7a-8a9a-f30dc7fbef1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.countplot(x='Outlet_Size',data=dataset)\n",
        "plt.plot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 657
        },
        "id": "EsFclR_XXkX0",
        "outputId": "d2dd0be6-7399-4fbe-829c-c37c74e2ea9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.plot(*args: 'float | ArrayLike | str', scalex: 'bool' = True, scaley: 'bool' = True, data=None, **kwargs) -> 'list[Line2D]'>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.plot</b><br/>def plot(*args: float | ArrayLike | str, scalex: bool=True, scaley: bool=True, data=None, **kwargs) -&gt; list[Line2D]</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Plot y versus x as lines and/or markers.\n",
              "\n",
              "Call signatures::\n",
              "\n",
              "    plot([x], y, [fmt], *, data=None, **kwargs)\n",
              "    plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n",
              "\n",
              "The coordinates of the points or line nodes are given by *x*, *y*.\n",
              "\n",
              "The optional parameter *fmt* is a convenient way for defining basic\n",
              "formatting like color, marker and linestyle. It&#x27;s a shortcut string\n",
              "notation described in the *Notes* section below.\n",
              "\n",
              "&gt;&gt;&gt; plot(x, y)        # plot x and y using default line style and color\n",
              "&gt;&gt;&gt; plot(x, y, &#x27;bo&#x27;)  # plot x and y using blue circle markers\n",
              "&gt;&gt;&gt; plot(y)           # plot y using x as index array 0..N-1\n",
              "&gt;&gt;&gt; plot(y, &#x27;r+&#x27;)     # ditto, but with red plusses\n",
              "\n",
              "You can use `.Line2D` properties as keyword arguments for more\n",
              "control on the appearance. Line properties and *fmt* can be mixed.\n",
              "The following two calls yield identical results:\n",
              "\n",
              "&gt;&gt;&gt; plot(x, y, &#x27;go--&#x27;, linewidth=2, markersize=12)\n",
              "&gt;&gt;&gt; plot(x, y, color=&#x27;green&#x27;, marker=&#x27;o&#x27;, linestyle=&#x27;dashed&#x27;,\n",
              "...      linewidth=2, markersize=12)\n",
              "\n",
              "When conflicting with *fmt*, keyword arguments take precedence.\n",
              "\n",
              "\n",
              "**Plotting labelled data**\n",
              "\n",
              "There&#x27;s a convenient way for plotting objects with labelled data (i.e.\n",
              "data that can be accessed by index ``obj[&#x27;y&#x27;]``). Instead of giving\n",
              "the data in *x* and *y*, you can provide the object in the *data*\n",
              "parameter and just give the labels for *x* and *y*::\n",
              "\n",
              "&gt;&gt;&gt; plot(&#x27;xlabel&#x27;, &#x27;ylabel&#x27;, data=obj)\n",
              "\n",
              "All indexable objects are supported. This could e.g. be a `dict`, a\n",
              "`pandas.DataFrame` or a structured numpy array.\n",
              "\n",
              "\n",
              "**Plotting multiple sets of data**\n",
              "\n",
              "There are various ways to plot multiple sets of data.\n",
              "\n",
              "- The most straight forward way is just to call `plot` multiple times.\n",
              "  Example:\n",
              "\n",
              "  &gt;&gt;&gt; plot(x1, y1, &#x27;bo&#x27;)\n",
              "  &gt;&gt;&gt; plot(x2, y2, &#x27;go&#x27;)\n",
              "\n",
              "- If *x* and/or *y* are 2D arrays, a separate data set will be drawn\n",
              "  for every column. If both *x* and *y* are 2D, they must have the\n",
              "  same shape. If only one of them is 2D with shape (N, m) the other\n",
              "  must have length N and will be used for every data set m.\n",
              "\n",
              "  Example:\n",
              "\n",
              "  &gt;&gt;&gt; x = [1, 2, 3]\n",
              "  &gt;&gt;&gt; y = np.array([[1, 2], [3, 4], [5, 6]])\n",
              "  &gt;&gt;&gt; plot(x, y)\n",
              "\n",
              "  is equivalent to:\n",
              "\n",
              "  &gt;&gt;&gt; for col in range(y.shape[1]):\n",
              "  ...     plot(x, y[:, col])\n",
              "\n",
              "- The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*\n",
              "  groups::\n",
              "\n",
              "  &gt;&gt;&gt; plot(x1, y1, &#x27;g^&#x27;, x2, y2, &#x27;g-&#x27;)\n",
              "\n",
              "  In this case, any additional keyword argument applies to all\n",
              "  datasets. Also, this syntax cannot be combined with the *data*\n",
              "  parameter.\n",
              "\n",
              "By default, each line is assigned a different style specified by a\n",
              "&#x27;style cycle&#x27;. The *fmt* and line property parameters are only\n",
              "necessary if you want explicit deviations from these defaults.\n",
              "Alternatively, you can also change the style cycle using\n",
              ":rc:`axes.prop_cycle`.\n",
              "\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "x, y : array-like or scalar\n",
              "    The horizontal / vertical coordinates of the data points.\n",
              "    *x* values are optional and default to ``range(len(y))``.\n",
              "\n",
              "    Commonly, these parameters are 1D arrays.\n",
              "\n",
              "    They can also be scalars, or two-dimensional (in that case, the\n",
              "    columns represent separate data sets).\n",
              "\n",
              "    These arguments cannot be passed as keywords.\n",
              "\n",
              "fmt : str, optional\n",
              "    A format string, e.g. &#x27;ro&#x27; for red circles. See the *Notes*\n",
              "    section for a full description of the format strings.\n",
              "\n",
              "    Format strings are just an abbreviation for quickly setting\n",
              "    basic line properties. All of these and more can also be\n",
              "    controlled by keyword arguments.\n",
              "\n",
              "    This argument cannot be passed as keyword.\n",
              "\n",
              "data : indexable object, optional\n",
              "    An object with labelled data. If given, provide the label names to\n",
              "    plot in *x* and *y*.\n",
              "\n",
              "    .. note::\n",
              "        Technically there&#x27;s a slight ambiguity in calls where the\n",
              "        second label is a valid *fmt*. ``plot(&#x27;n&#x27;, &#x27;o&#x27;, data=obj)``\n",
              "        could be ``plt(x, y)`` or ``plt(y, fmt)``. In such cases,\n",
              "        the former interpretation is chosen, but a warning is issued.\n",
              "        You may suppress the warning by adding an empty format string\n",
              "        ``plot(&#x27;n&#x27;, &#x27;o&#x27;, &#x27;&#x27;, data=obj)``.\n",
              "\n",
              "Returns\n",
              "-------\n",
              "list of `.Line2D`\n",
              "    A list of lines representing the plotted data.\n",
              "\n",
              "Other Parameters\n",
              "----------------\n",
              "scalex, scaley : bool, default: True\n",
              "    These parameters determine if the view limits are adapted to the\n",
              "    data limits. The values are passed on to\n",
              "    `~.axes.Axes.autoscale_view`.\n",
              "\n",
              "**kwargs : `~matplotlib.lines.Line2D` properties, optional\n",
              "    *kwargs* are used to specify properties like a line label (for\n",
              "    auto legends), linewidth, antialiasing, marker face color.\n",
              "    Example::\n",
              "\n",
              "    &gt;&gt;&gt; plot([1, 2, 3], [1, 2, 3], &#x27;go-&#x27;, label=&#x27;line 1&#x27;, linewidth=2)\n",
              "    &gt;&gt;&gt; plot([1, 2, 3], [1, 4, 9], &#x27;rs&#x27;, label=&#x27;line 2&#x27;)\n",
              "\n",
              "    If you specify multiple lines with one plot call, the kwargs apply\n",
              "    to all those lines. In case the label object is iterable, each\n",
              "    element is used as labels for each set of data.\n",
              "\n",
              "    Here is a list of available `.Line2D` properties:\n",
              "\n",
              "    Properties:\n",
              "    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n",
              "    alpha: scalar or None\n",
              "    animated: bool\n",
              "    antialiased or aa: bool\n",
              "    clip_box: `~matplotlib.transforms.BboxBase` or None\n",
              "    clip_on: bool\n",
              "    clip_path: Patch or (Path, Transform) or None\n",
              "    color or c: :mpltype:`color`\n",
              "    dash_capstyle: `.CapStyle` or {&#x27;butt&#x27;, &#x27;projecting&#x27;, &#x27;round&#x27;}\n",
              "    dash_joinstyle: `.JoinStyle` or {&#x27;miter&#x27;, &#x27;round&#x27;, &#x27;bevel&#x27;}\n",
              "    dashes: sequence of floats (on/off ink in points) or (None, None)\n",
              "    data: (2, N) array or two 1D arrays\n",
              "    drawstyle or ds: {&#x27;default&#x27;, &#x27;steps&#x27;, &#x27;steps-pre&#x27;, &#x27;steps-mid&#x27;, &#x27;steps-post&#x27;}, default: &#x27;default&#x27;\n",
              "    figure: `~matplotlib.figure.Figure` or `~matplotlib.figure.SubFigure`\n",
              "    fillstyle: {&#x27;full&#x27;, &#x27;left&#x27;, &#x27;right&#x27;, &#x27;bottom&#x27;, &#x27;top&#x27;, &#x27;none&#x27;}\n",
              "    gapcolor: :mpltype:`color` or None\n",
              "    gid: str\n",
              "    in_layout: bool\n",
              "    label: object\n",
              "    linestyle or ls: {&#x27;-&#x27;, &#x27;--&#x27;, &#x27;-.&#x27;, &#x27;:&#x27;, &#x27;&#x27;, (offset, on-off-seq), ...}\n",
              "    linewidth or lw: float\n",
              "    marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n",
              "    markeredgecolor or mec: :mpltype:`color`\n",
              "    markeredgewidth or mew: float\n",
              "    markerfacecolor or mfc: :mpltype:`color`\n",
              "    markerfacecoloralt or mfcalt: :mpltype:`color`\n",
              "    markersize or ms: float\n",
              "    markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n",
              "    mouseover: bool\n",
              "    path_effects: list of `.AbstractPathEffect`\n",
              "    picker: float or callable[[Artist, Event], tuple[bool, dict]]\n",
              "    pickradius: float\n",
              "    rasterized: bool\n",
              "    sketch_params: (scale: float, length: float, randomness: float)\n",
              "    snap: bool or None\n",
              "    solid_capstyle: `.CapStyle` or {&#x27;butt&#x27;, &#x27;projecting&#x27;, &#x27;round&#x27;}\n",
              "    solid_joinstyle: `.JoinStyle` or {&#x27;miter&#x27;, &#x27;round&#x27;, &#x27;bevel&#x27;}\n",
              "    transform: unknown\n",
              "    url: str\n",
              "    visible: bool\n",
              "    xdata: 1D array\n",
              "    ydata: 1D array\n",
              "    zorder: float\n",
              "\n",
              "See Also\n",
              "--------\n",
              "scatter : XY scatter plot with markers of varying size and/or color (\n",
              "    sometimes also called bubble chart).\n",
              "\n",
              "Notes\n",
              "-----\n",
              "\n",
              ".. note::\n",
              "\n",
              "    This is the :ref:`pyplot wrapper &lt;pyplot_interface&gt;` for `.axes.Axes.plot`.\n",
              "\n",
              "**Format Strings**\n",
              "\n",
              "A format string consists of a part for color, marker and line::\n",
              "\n",
              "    fmt = &#x27;[marker][line][color]&#x27;\n",
              "\n",
              "Each of them is optional. If not provided, the value from the style\n",
              "cycle is used. Exception: If ``line`` is given, but no ``marker``,\n",
              "the data will be a line without markers.\n",
              "\n",
              "Other combinations such as ``[color][marker][line]`` are also\n",
              "supported, but note that their parsing may be ambiguous.\n",
              "\n",
              "**Markers**\n",
              "\n",
              "=============   ===============================\n",
              "character       description\n",
              "=============   ===============================\n",
              "``&#x27;.&#x27;``         point marker\n",
              "``&#x27;,&#x27;``         pixel marker\n",
              "``&#x27;o&#x27;``         circle marker\n",
              "``&#x27;v&#x27;``         triangle_down marker\n",
              "``&#x27;^&#x27;``         triangle_up marker\n",
              "``&#x27;&lt;&#x27;``         triangle_left marker\n",
              "``&#x27;&gt;&#x27;``         triangle_right marker\n",
              "``&#x27;1&#x27;``         tri_down marker\n",
              "``&#x27;2&#x27;``         tri_up marker\n",
              "``&#x27;3&#x27;``         tri_left marker\n",
              "``&#x27;4&#x27;``         tri_right marker\n",
              "``&#x27;8&#x27;``         octagon marker\n",
              "``&#x27;s&#x27;``         square marker\n",
              "``&#x27;p&#x27;``         pentagon marker\n",
              "``&#x27;P&#x27;``         plus (filled) marker\n",
              "``&#x27;*&#x27;``         star marker\n",
              "``&#x27;h&#x27;``         hexagon1 marker\n",
              "``&#x27;H&#x27;``         hexagon2 marker\n",
              "``&#x27;+&#x27;``         plus marker\n",
              "``&#x27;x&#x27;``         x marker\n",
              "``&#x27;X&#x27;``         x (filled) marker\n",
              "``&#x27;D&#x27;``         diamond marker\n",
              "``&#x27;d&#x27;``         thin_diamond marker\n",
              "``&#x27;|&#x27;``         vline marker\n",
              "``&#x27;_&#x27;``         hline marker\n",
              "=============   ===============================\n",
              "\n",
              "**Line Styles**\n",
              "\n",
              "=============    ===============================\n",
              "character        description\n",
              "=============    ===============================\n",
              "``&#x27;-&#x27;``          solid line style\n",
              "``&#x27;--&#x27;``         dashed line style\n",
              "``&#x27;-.&#x27;``         dash-dot line style\n",
              "``&#x27;:&#x27;``          dotted line style\n",
              "=============    ===============================\n",
              "\n",
              "Example format strings::\n",
              "\n",
              "    &#x27;b&#x27;    # blue markers with default shape\n",
              "    &#x27;or&#x27;   # red circles\n",
              "    &#x27;-g&#x27;   # green solid line\n",
              "    &#x27;--&#x27;   # dashed line with default color\n",
              "    &#x27;^k:&#x27;  # black triangle_up markers connected by a dotted line\n",
              "\n",
              "**Colors**\n",
              "\n",
              "The supported color abbreviations are the single letter codes\n",
              "\n",
              "=============    ===============================\n",
              "character        color\n",
              "=============    ===============================\n",
              "``&#x27;b&#x27;``          blue\n",
              "``&#x27;g&#x27;``          green\n",
              "``&#x27;r&#x27;``          red\n",
              "``&#x27;c&#x27;``          cyan\n",
              "``&#x27;m&#x27;``          magenta\n",
              "``&#x27;y&#x27;``          yellow\n",
              "``&#x27;k&#x27;``          black\n",
              "``&#x27;w&#x27;``          white\n",
              "=============    ===============================\n",
              "\n",
              "and the ``&#x27;CN&#x27;`` colors that index into the default property cycle.\n",
              "\n",
              "If the color is the only part of the format string, you can\n",
              "additionally use any  `matplotlib.colors` spec, e.g. full names\n",
              "(``&#x27;green&#x27;``) or hex strings (``&#x27;#008000&#x27;``).</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 3821);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "aNVdb66zXxgy",
        "outputId": "9617151b-8898-41f4-f7fe-c83bfddddb23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
              "0           FDA15         9.30          Low Fat         0.016047   \n",
              "1           DRC01         5.92          Regular         0.019278   \n",
              "2           FDN15        17.50          Low Fat         0.016760   \n",
              "3           FDX07        19.20          Regular         0.000000   \n",
              "4           NCD19         8.93          Low Fat         0.000000   \n",
              "\n",
              "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
              "0                  Dairy  249.8092            OUT049   \n",
              "1            Soft Drinks   48.2692            OUT018   \n",
              "2                   Meat  141.6180            OUT049   \n",
              "3  Fruits and Vegetables  182.0950            OUT010   \n",
              "4              Household   53.8614            OUT013   \n",
              "\n",
              "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
              "0                       1999      Medium               Tier 1   \n",
              "1                       2009      Medium               Tier 3   \n",
              "2                       1999      Medium               Tier 1   \n",
              "3                       1998       Small               Tier 3   \n",
              "4                       1987        High               Tier 3   \n",
              "\n",
              "         Outlet_Type  Item_Outlet_Sales  \n",
              "0  Supermarket Type1          3735.1380  \n",
              "1  Supermarket Type2           443.4228  \n",
              "2  Supermarket Type1          2097.2700  \n",
              "3      Grocery Store           732.3800  \n",
              "4  Supermarket Type1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-754d27a5-6ef3-4cf7-91e1-4fa6d26626da\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FDA15</td>\n",
              "      <td>9.30</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>Dairy</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRC01</td>\n",
              "      <td>5.92</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>Soft Drinks</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>OUT018</td>\n",
              "      <td>2009</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FDN15</td>\n",
              "      <td>17.50</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>Meat</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>OUT049</td>\n",
              "      <td>1999</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Tier 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FDX07</td>\n",
              "      <td>19.20</td>\n",
              "      <td>Regular</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Fruits and Vegetables</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>OUT010</td>\n",
              "      <td>1998</td>\n",
              "      <td>Small</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NCD19</td>\n",
              "      <td>8.93</td>\n",
              "      <td>Low Fat</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Household</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>OUT013</td>\n",
              "      <td>1987</td>\n",
              "      <td>High</td>\n",
              "      <td>Tier 3</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-754d27a5-6ef3-4cf7-91e1-4fa6d26626da')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-754d27a5-6ef3-4cf7-91e1-4fa6d26626da button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-754d27a5-6ef3-4cf7-91e1-4fa6d26626da');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c540d701-a13a-40b6-96bd-6f4f44e57daf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c540d701-a13a-40b6-96bd-6f4f44e57daf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c540d701-a13a-40b6-96bd-6f4f44e57daf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 8523,\n  \"fields\": [\n    {\n      \"column\": \"Item_Identifier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1559,\n        \"samples\": [\n          \"FDY01\",\n          \"FDG05\",\n          \"NCJ29\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.2261237245329735,\n        \"min\": 4.555,\n        \"max\": 21.35,\n        \"num_unique_values\": 416,\n        \"samples\": [\n          15.0,\n          9.21,\n          6.895\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Fat_Content\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Regular\",\n          \"reg\",\n          \"low fat\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Visibility\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.051597822321135196,\n        \"min\": 0.0,\n        \"max\": 0.328390948,\n        \"num_unique_values\": 7880,\n        \"samples\": [\n          0.224837308,\n          0.046088273,\n          0.0204702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"Dairy\",\n          \"Soft Drinks\",\n          \"Baking Goods\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_MRP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.27506651219039,\n        \"min\": 31.29,\n        \"max\": 266.8884,\n        \"num_unique_values\": 5938,\n        \"samples\": [\n          255.9672,\n          93.512,\n          208.3954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Identifier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"OUT035\",\n          \"OUT018\",\n          \"OUT045\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Establishment_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2009,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1997,\n          2009,\n          2002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Medium\",\n          \"Small\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Location_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Tier 1\",\n          \"Tier 3\",\n          \"Tier 2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Supermarket Type2\",\n          \"Supermarket Type3\",\n          \"Supermarket Type1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Outlet_Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1706.499615733832,\n        \"min\": 33.29,\n        \"max\": 13086.9648,\n        \"num_unique_values\": 3493,\n        \"samples\": [\n          5466.8838,\n          8417.7094,\n          5888.3352\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Item_Fat_Content'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "QFqkQnVyX0T_",
        "outputId": "62dda651-5312-4b7c-d437-a1f66aadffc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Fat_Content\n",
              "Low Fat    5089\n",
              "Regular    2889\n",
              "LF          316\n",
              "reg         117\n",
              "low fat     112\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Low Fat</th>\n",
              "      <td>5089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Regular</th>\n",
              "      <td>2889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LF</th>\n",
              "      <td>316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reg</th>\n",
              "      <td>117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>low fat</th>\n",
              "      <td>112</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.replace({'Item_Fat_Content': {'low fat':'Low Fat','LF':'Low Fat', 'reg':'Regular'}}, inplace=True)"
      ],
      "metadata": {
        "id": "EDJlyJK7X63s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Item_Fat_Content'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "HjVpvXXrX9bT",
        "outputId": "d72ae89b-ed0f-479f-bfc6-8ae31a184824"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Item_Fat_Content\n",
              "Low Fat    5517\n",
              "Regular    3006\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Low Fat</th>\n",
              "      <td>5517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Regular</th>\n",
              "      <td>3006</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "encoder=LabelEncoder()"
      ],
      "metadata": {
        "id": "mbhHlsRhYC_-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset['Item_Identifier'] = encoder.fit_transform(dataset['Item_Identifier'])\n",
        "\n",
        "dataset['Item_Fat_Content'] = encoder.fit_transform(dataset['Item_Fat_Content'])\n",
        "\n",
        "dataset['Item_Type'] = encoder.fit_transform(dataset['Item_Type'])\n",
        "\n",
        "dataset['Outlet_Identifier'] = encoder.fit_transform(dataset['Outlet_Identifier'])\n",
        "\n",
        "dataset['Outlet_Size'] = encoder.fit_transform(dataset['Outlet_Size'])\n",
        "\n",
        "dataset['Outlet_Location_Type'] = encoder.fit_transform(dataset['Outlet_Location_Type'])\n",
        "\n",
        "dataset['Outlet_Type'] = encoder.fit_transform(dataset['Outlet_Type'])"
      ],
      "metadata": {
        "id": "kgjDFhgeYHCj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "k_nTw_feYJyj",
        "outputId": "7bdcb25f-1123-45de-af5a-bc26876ba909"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Item_Identifier  Item_Weight  Item_Fat_Content  Item_Visibility  Item_Type  \\\n",
              "0              156         9.30                 0         0.016047          4   \n",
              "1                8         5.92                 1         0.019278         14   \n",
              "2              662        17.50                 0         0.016760         10   \n",
              "3             1121        19.20                 1         0.000000          6   \n",
              "4             1297         8.93                 0         0.000000          9   \n",
              "\n",
              "   Item_MRP  Outlet_Identifier  Outlet_Establishment_Year  Outlet_Size  \\\n",
              "0  249.8092                  9                       1999            1   \n",
              "1   48.2692                  3                       2009            1   \n",
              "2  141.6180                  9                       1999            1   \n",
              "3  182.0950                  0                       1998            2   \n",
              "4   53.8614                  1                       1987            0   \n",
              "\n",
              "   Outlet_Location_Type  Outlet_Type  Item_Outlet_Sales  \n",
              "0                     0            1          3735.1380  \n",
              "1                     2            2           443.4228  \n",
              "2                     0            1          2097.2700  \n",
              "3                     2            0           732.3800  \n",
              "4                     2            1           994.7052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-93e134da-2a65-4ea2-8dc0-fc7bb7f33403\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Identifier</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Fat_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_MRP</th>\n",
              "      <th>Outlet_Identifier</th>\n",
              "      <th>Outlet_Establishment_Year</th>\n",
              "      <th>Outlet_Size</th>\n",
              "      <th>Outlet_Location_Type</th>\n",
              "      <th>Outlet_Type</th>\n",
              "      <th>Item_Outlet_Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>156</td>\n",
              "      <td>9.30</td>\n",
              "      <td>0</td>\n",
              "      <td>0.016047</td>\n",
              "      <td>4</td>\n",
              "      <td>249.8092</td>\n",
              "      <td>9</td>\n",
              "      <td>1999</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3735.1380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>5.92</td>\n",
              "      <td>1</td>\n",
              "      <td>0.019278</td>\n",
              "      <td>14</td>\n",
              "      <td>48.2692</td>\n",
              "      <td>3</td>\n",
              "      <td>2009</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>443.4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>662</td>\n",
              "      <td>17.50</td>\n",
              "      <td>0</td>\n",
              "      <td>0.016760</td>\n",
              "      <td>10</td>\n",
              "      <td>141.6180</td>\n",
              "      <td>9</td>\n",
              "      <td>1999</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2097.2700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1121</td>\n",
              "      <td>19.20</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6</td>\n",
              "      <td>182.0950</td>\n",
              "      <td>0</td>\n",
              "      <td>1998</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>732.3800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1297</td>\n",
              "      <td>8.93</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>53.8614</td>\n",
              "      <td>1</td>\n",
              "      <td>1987</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>994.7052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93e134da-2a65-4ea2-8dc0-fc7bb7f33403')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-93e134da-2a65-4ea2-8dc0-fc7bb7f33403 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-93e134da-2a65-4ea2-8dc0-fc7bb7f33403');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-70160309-5b37-4b5f-98b6-ec26d107cfcb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-70160309-5b37-4b5f-98b6-ec26d107cfcb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-70160309-5b37-4b5f-98b6-ec26d107cfcb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 8523,\n  \"fields\": [\n    {\n      \"column\": \"Item_Identifier\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 449,\n        \"min\": 0,\n        \"max\": 1558,\n        \"num_unique_values\": 1559,\n        \"samples\": [\n          1167,\n          396,\n          1357\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.2261237245329735,\n        \"min\": 4.555,\n        \"max\": 21.35,\n        \"num_unique_values\": 416,\n        \"samples\": [\n          15.0,\n          9.21,\n          6.895\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Fat_Content\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Visibility\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.051597822321135196,\n        \"min\": 0.0,\n        \"max\": 0.328390948,\n        \"num_unique_values\": 7880,\n        \"samples\": [\n          0.224837308,\n          0.046088273\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 15,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          4,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_MRP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.27506651219039,\n        \"min\": 31.29,\n        \"max\": 266.8884,\n        \"num_unique_values\": 5938,\n        \"samples\": [\n          255.9672,\n          93.512\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Identifier\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Establishment_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1985,\n        \"max\": 2009,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1997,\n          2009\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Location_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outlet_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item_Outlet_Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1706.499615733832,\n        \"min\": 33.29,\n        \"max\": 13086.9648,\n        \"num_unique_values\": 3493,\n        \"samples\": [\n          5466.8838,\n          8417.7094\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X=dataset.drop(columns='Item_Outlet_Sales',axis=1)\n",
        "Y=dataset['Item_Outlet_Sales']\n",
        "print(X)\n",
        "print(Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TChTj_YZYM5y",
        "outputId": "f3b79e38-c1c7-4ec7-854a-d42f1c76b65a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Item_Identifier  Item_Weight  Item_Fat_Content  Item_Visibility  \\\n",
            "0                 156        9.300                 0         0.016047   \n",
            "1                   8        5.920                 1         0.019278   \n",
            "2                 662       17.500                 0         0.016760   \n",
            "3                1121       19.200                 1         0.000000   \n",
            "4                1297        8.930                 0         0.000000   \n",
            "...               ...          ...               ...              ...   \n",
            "8518              370        6.865                 0         0.056783   \n",
            "8519              897        8.380                 1         0.046982   \n",
            "8520             1357       10.600                 0         0.035186   \n",
            "8521              681        7.210                 1         0.145221   \n",
            "8522               50       14.800                 0         0.044878   \n",
            "\n",
            "      Item_Type  Item_MRP  Outlet_Identifier  Outlet_Establishment_Year  \\\n",
            "0             4  249.8092                  9                       1999   \n",
            "1            14   48.2692                  3                       2009   \n",
            "2            10  141.6180                  9                       1999   \n",
            "3             6  182.0950                  0                       1998   \n",
            "4             9   53.8614                  1                       1987   \n",
            "...         ...       ...                ...                        ...   \n",
            "8518         13  214.5218                  1                       1987   \n",
            "8519          0  108.1570                  7                       2002   \n",
            "8520          8   85.1224                  6                       2004   \n",
            "8521         13  103.1332                  3                       2009   \n",
            "8522         14   75.4670                  8                       1997   \n",
            "\n",
            "      Outlet_Size  Outlet_Location_Type  Outlet_Type  \n",
            "0               1                     0            1  \n",
            "1               1                     2            2  \n",
            "2               1                     0            1  \n",
            "3               2                     2            0  \n",
            "4               0                     2            1  \n",
            "...           ...                   ...          ...  \n",
            "8518            0                     2            1  \n",
            "8519            2                     1            1  \n",
            "8520            2                     1            1  \n",
            "8521            1                     2            2  \n",
            "8522            2                     0            1  \n",
            "\n",
            "[8523 rows x 11 columns]\n",
            "0       3735.1380\n",
            "1        443.4228\n",
            "2       2097.2700\n",
            "3        732.3800\n",
            "4        994.7052\n",
            "          ...    \n",
            "8518    2778.3834\n",
            "8519     549.2850\n",
            "8520    1193.1136\n",
            "8521    1845.5976\n",
            "8522     765.6700\n",
            "Name: Item_Outlet_Sales, Length: 8523, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)"
      ],
      "metadata": {
        "id": "RUTR_l3IYYkn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "model=RandomForestRegressor()\n"
      ],
      "metadata": {
        "id": "CZeoAHTlYir8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train,Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "6g_8oT81Yvap",
        "outputId": "8754a4f5-dfd5-4bec-889c-5d132ee5891d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_train=model.predict(X_train)"
      ],
      "metadata": {
        "id": "QxCft6BvZU21"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_train=metrics.r2_score(Y_train,data_train)"
      ],
      "metadata": {
        "id": "pLvwwU9vZZ58"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('R Squared Value', r2_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zKGzPQUJZcvF",
        "outputId": "fb18b13f-3515-4831-bfc5-5b86d15df8b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R Squared Value 0.9387040961507318\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_test=model.predict(X_test)"
      ],
      "metadata": {
        "id": "uYq9Bz4jZhH2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_test=metrics.r2_score(Y_test,data_test)"
      ],
      "metadata": {
        "id": "IIZtVObEZlIN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('R Squared Value', r2_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8zj3ZL49Znit",
        "outputId": "b2f4673a-8724-463a-8ca5-a70e5c425e52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R Squared Value 0.5539475028680965\n"
          ]
        }
      ]
    }
  ]
}
